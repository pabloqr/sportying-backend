CREATE EXTENSION IF NOT EXISTS btree_gist;

CREATE TYPE "user_role" AS ENUM (
  'SUPERADMIN',
  'ADMIN',
  'CLIENT'
);

CREATE TYPE "court_status" AS ENUM (
  'OPEN',
  'MAINTENANCE',
  'BLOCKED',
  'WEATHER'
);

CREATE TYPE "device_type" AS ENUM (
  'PRESENCE',
  'RAIN'
);

CREATE TYPE "device_status" AS ENUM (
  'NORMAL',
  'OFF',
  'BATTERY',
  'ERROR'
);

CREATE TYPE "reservation_status" AS ENUM (
  'EMPTY',
  'OCCUPIED'
);

CREATE TYPE "notification_severity" AS ENUM (
  'INFO',
  'WARNING'
);

CREATE TYPE "notification_type" AS ENUM (
  'DEVICE',
  'RESERVATION'
);

CREATE TABLE "complexes" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "complex_name" varchar NOT NULL,
  "time_ini" varchar(5) NOT NULL,
  "time_end" varchar(5) NOT NULL,
  "loc_longitude" double precision,
  "loc_latitude" double precision,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false
);

CREATE TABLE "users" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "password" varchar NOT NULL,
  "refresh_token" varchar,
  "role" "user_role" NOT NULL DEFAULT 'CLIENT',
  "name" varchar NOT NULL,
  "surname" varchar,
  "mail" varchar UNIQUE NOT NULL,
  "phone_prefix" integer NOT NULL,
  "phone_number" integer NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false,
  UNIQUE ("phone_prefix", "phone_number")
);

CREATE TABLE "admins" (
  "id" integer,
  "complex_id" integer,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false,
  PRIMARY KEY ("id", "complex_id"),
  FOREIGN KEY ("id") REFERENCES "users" ("id"),
  FOREIGN KEY ("complex_id") REFERENCES "complexes" ("id")
);

CREATE TABLE "notifications" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
  "user_id" integer,
  "title" varchar NOT NULL,
  "body" varchar NOT NULL,
  "severity" "notification_severity" NOT NULL,
  "type" "notification_type" NOT NULL,
  "related_id" integer,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false,
  PRIMARY KEY ("id", "user_id", "created_at"),
  FOREIGN KEY ("user_id") REFERENCES "users" ("id")
);

CREATE TABLE "courts" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "complex_id" integer NOT NULL,
  "sport" varchar NOT NULL,
  "name" varchar NOT NULL,
  "description" varchar,
  "max_people" integer NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false,
  FOREIGN KEY ("complex_id") REFERENCES "complexes" ("id"),
  UNIQUE ("complex_id", "sport", "name")
);

-- No es necesaria la tabla 'devices_status' porque en esta tabla no se puede actualizar ningún parámetro más que
-- 'status'
CREATE TABLE "devices" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "id_key" uuid UNIQUE,
  "api_key" varchar,
  "complex_id" integer NOT NULL,
  "type" "device_type" NOT NULL,
  "status" "device_status" NOT NULL DEFAULT 'NORMAL',
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false,
  FOREIGN KEY ("complex_id") REFERENCES "complexes" ("id")
);

CREATE TABLE "devices_telemetry" (
  "device_id" integer,
  "value" double precision NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  PRIMARY KEY ("device_id", "created_at"),
  FOREIGN KEY ("device_id") REFERENCES "devices" ("id")
);

CREATE TABLE "reservations" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" integer NOT NULL,
  "complex_id" integer NOT NULL,
  "court_id" integer NOT NULL,
  "date_ini" timestamp NOT NULL,
  "date_end" timestamp NOT NULL,
  "date_range" tsrange GENERATED ALWAYS AS (tsrange(date_ini, date_end, '[)')) STORED,
  "status" "reservation_status" NOT NULL DEFAULT 'EMPTY',
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now(),
  "is_delete" bool DEFAULT false,
  UNIQUE ("complex_id", "court_id", "date_ini"),
  FOREIGN KEY ("user_id") REFERENCES "users" ("id"),
  FOREIGN KEY ("complex_id") REFERENCES "complexes" ("id"),
  FOREIGN KEY ("court_id") REFERENCES "courts" ("id"),
  CONSTRAINT check_dates CHECK (date_ini < date_end),
  CONSTRAINT no_overlap
  EXCLUDE USING GIST (
    "complex_id" WITH =,
    "court_id" WITH =,
    "date_range" WITH &&
  )
);

CREATE TABLE "courts_status" (
  "court_id" integer,
  "status" "court_status" NOT NULL DEFAULT 'OPEN',
  "created_at" timestamp NOT NULL DEFAULT now(),
  PRIMARY KEY ("court_id", "created_at"),
  FOREIGN KEY ("court_id") REFERENCES "courts" ("id")
);

CREATE TABLE "courts_devices" (
  "court_id" integer,
  "device_id" integer,
  "is_delete" bool DEFAULT false,
  PRIMARY KEY ("court_id", "device_id"),
  FOREIGN KEY ("court_id") REFERENCES "courts" ("id"),
  FOREIGN KEY ("device_id") REFERENCES "devices" ("id")
);

COMMENT ON TABLE "admins" IS 'Es admin si el id del usuario está aquí';

CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_complexes_timestamp
BEFORE UPDATE ON "complexes"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "users"
CREATE TRIGGER update_users_timestamp
BEFORE UPDATE ON "users"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "admins"
CREATE TRIGGER update_admins_timestamp
BEFORE UPDATE ON "admins"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "notifications"
CREATE TRIGGER update_notifications_timestamp
BEFORE UPDATE ON "notifications"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "courts"
CREATE TRIGGER update_courts_timestamp
BEFORE UPDATE ON "courts"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "devices"
CREATE TRIGGER update_devices_timestamp
BEFORE UPDATE ON "devices"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "devices_telemetry"
CREATE TRIGGER update_device_telemetry_timestamp
BEFORE UPDATE ON "devices_telemetry"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "reservations"
CREATE TRIGGER update_reservations_timestamp
BEFORE UPDATE ON "reservations"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "courts_status"
CREATE TRIGGER update_courts_status_timestamp
BEFORE UPDATE ON "courts_status"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- Trigger para la tabla "courts_devices"
CREATE TRIGGER update_courts_devices_timestamp
BEFORE UPDATE ON "courts_devices"
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();
